syntax = "proto3";
package goodmem.v1;

option go_package = "github.com/pairsys/goodmem/cli/gen/goodmem/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "goodmem/v1/common.proto";

// A Space is the fundamental storage unit in GoodMem.
// Reserved label keys:
//   user – identifies the end-user
//   bot  – identifies the agent/bot
//   org  – identifies the organisation or tenant
message Space {
  bytes space_id = 1; // UUID (16 bytes)
  string name = 2; // human-friendly name, unique per owner
  map<string, string> labels = 3; // arbitrary k-v pairs, includes reserved keys
  optional bytes embedder_id = 4; // Reference to an Embedder UUID (16 bytes)
  google.protobuf.Timestamp created_at = 5;
  bytes owner_id = 6; // User UUID (16 bytes)
  bool public_read = 7; // if true, anyone may query
  google.protobuf.Timestamp updated_at = 8; // Added for consistency
  bytes created_by_id = 9; // User UUID (16 bytes) - Added
  bytes updated_by_id = 10; // User UUID (16 bytes) - Added
}

// Service for managing Spaces.
service SpaceService {
  // Creates a new Space. Owner/creator derived from auth context.
  rpc CreateSpace(CreateSpaceRequest) returns (Space);
  // Retrieves details of a specific Space.
  rpc GetSpace(GetSpaceRequest) returns (Space);
  // Lists Spaces accessible to the caller (filtered by owner, labels etc.)
  rpc ListSpaces(ListSpacesRequest) returns (ListSpacesResponse);
  // Updates mutable properties of a Space (e.g., name, labels, public_read).
  rpc UpdateSpace(UpdateSpaceRequest) returns (Space);
  // Deletes a Space and its associated content (Memories, Chunks).
  rpc DeleteSpace(DeleteSpaceRequest) returns (google.protobuf.Empty);
}

message CreateSpaceRequest {
  string name = 1;
  map<string, string> labels = 2;
  optional bytes embedder_id = 3; // Reference to an Embedder UUID (16 bytes)
  bool public_read = 4;
  optional bytes owner_id = 5; // Optional: if not provided, derived from auth context. If provided, requires CREATE_SPACE_ANY permission.
  // created_by_id always derived from auth context.
}

message GetSpaceRequest {
  bytes space_id = 1; // UUID (16 bytes)
}

message ListSpacesRequest {
  // Optional filters
  optional bytes owner_id = 1;                         // Filter by owner (UUID)
  // label_selectors is a partial match: all listed pairs must be present
  // in a Space's labels map for it to be returned.
  map<string, string> label_selectors = 2;    // Partial match on labels
  optional string name_filter = 3;                     // Glob-style match on space name

  // Pagination
  optional int32 max_results = 4;                      // Max results to return
  optional string next_token = 5;                      // Opaque token for the next page

  // Sorting
  optional string sort_by = 6;                         // e.g., "created_time", "name"
  optional SortOrder sort_order = 7;                   // ASCENDING or DESCENDING
}

message ListSpacesResponse {
  repeated Space spaces = 1;                 // Page of results
  optional string next_token = 2;            // Token for next page (or empty)
}

// Internal serialization of this message produces the next_token
message ListSpacesNextPageToken {
  int32 start = 10;                                    // Cursor position
  optional bytes owner_id = 20;
  map<string, string> label_selectors = 30;
  optional string name_filter = 40;
  optional bytes requestor_id = 50;                     // Authenticated user for validation
  optional string sort_by = 60;
  optional SortOrder sort_order = 70;
}

message UpdateSpaceRequest {
  bytes space_id = 1; // Required: ID of the space to update (16 bytes UUID)
  
  // Optional fields to update.
  optional string name = 2;
  optional bool public_read = 4;
  
  // Use a oneof containing fields of the WRAPPER message type.
  // This achieves mutual exclusion while complying with proto3 rules.
  oneof label_update_strategy {
    // If 'replace_labels' is the field set in the oneof, it signifies
    // the intent to replace all existing labels with this set.
    StringMap replace_labels = 3; 
    
    // If 'merge_labels' is the field set in the oneof, it signifies
    // the intent to merge these labels with existing ones.
    StringMap merge_labels = 5;   
  }
  
  // embedding_model is immutable after creation
  // updated_by_id derived from auth context
}

message DeleteSpaceRequest {
  bytes space_id = 1; // UUID (16 bytes)
}