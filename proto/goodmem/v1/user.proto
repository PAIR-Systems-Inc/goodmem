syntax = "proto3";

package goodmem.v1;

option go_package = "github.com/pairsys/goodmem/cli/gen/goodmem/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Represents a user in the GoodMem system.
message User {
  bytes user_id = 1; // UUID (16 bytes)
  string email = 2;
  string display_name = 3;
  string username = 4; // Optional
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  // Avoid including sensitive info like password hashes here.
}

// Basic service for user management (can be expanded)
service UserService {
  // Retrieves user details (excluding sensitive info)
  // The request can specify user_id, email, both, or neither.
  // - If neither is specified, returns the current user based on API key authentication
  // - If user_id is specified, looks up user by ID
  // - If email is specified (and user_id not specified), looks up user by email
  // - If both are specified, looks up by user_id and ignores email (with a warning)
  // 
  // All API calls (except InitializeSystem) require authentication.
  // Possible error codes:
  // - NOT_FOUND: No matching user exists
  // - UNAUTHENTICATED: The request has no valid authentication
  // - PERMISSION_DENIED: The authenticated user is not authorized to view the requested user's information
  rpc GetUser(GetUserRequest) returns (User);
  
  // Initializes the system with a root user and API key (if not already initialized)
  // This is an administrative operation that creates the initial system user.
  // This is the only method that does not require authentication.
  // 
  // Possible error codes:
  // - ALREADY_EXISTS: The system is already initialized
  rpc InitializeSystem(InitializeSystemRequest) returns (InitializeSystemResponse);
  
  // Could add ListUsers, UpdateUser (for display_name etc.) if needed
}

message GetUserRequest {
  optional bytes user_id = 1; // Get by UUID (16 bytes)
  optional string email = 2; // Get by email address
  
  // Lookup behavior:
  // 1. If neither user_id nor email is set: Returns the current user based on API key authentication
  // 2. If user_id is set: Looks up user by ID
  // 3. If email is set (and user_id not set): Looks up user by email
  // 4. If both are set: Looks up by user_id and ignores email (with a warning)
}

message InitializeSystemRequest {
  // Empty request as no parameters are needed
}

message InitializeSystemResponse {
  bool already_initialized = 1; // Whether the system was already initialized
  string message = 2; // Status message
  string root_api_key = 3; // The raw API key (only provided when newly initialized)
  bytes user_id = 4; // The user ID of the root user (only provided when newly initialized)
}