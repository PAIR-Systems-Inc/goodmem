// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goodmem/v1/space.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pairsys/goodmem/cli/gen/goodmem/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SpaceServiceName is the fully-qualified name of the SpaceService service.
	SpaceServiceName = "goodmem.v1.SpaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SpaceServiceCreateSpaceProcedure is the fully-qualified name of the SpaceService's CreateSpace
	// RPC.
	SpaceServiceCreateSpaceProcedure = "/goodmem.v1.SpaceService/CreateSpace"
	// SpaceServiceGetSpaceProcedure is the fully-qualified name of the SpaceService's GetSpace RPC.
	SpaceServiceGetSpaceProcedure = "/goodmem.v1.SpaceService/GetSpace"
	// SpaceServiceListSpacesProcedure is the fully-qualified name of the SpaceService's ListSpaces RPC.
	SpaceServiceListSpacesProcedure = "/goodmem.v1.SpaceService/ListSpaces"
	// SpaceServiceUpdateSpaceProcedure is the fully-qualified name of the SpaceService's UpdateSpace
	// RPC.
	SpaceServiceUpdateSpaceProcedure = "/goodmem.v1.SpaceService/UpdateSpace"
	// SpaceServiceDeleteSpaceProcedure is the fully-qualified name of the SpaceService's DeleteSpace
	// RPC.
	SpaceServiceDeleteSpaceProcedure = "/goodmem.v1.SpaceService/DeleteSpace"
)

// SpaceServiceClient is a client for the goodmem.v1.SpaceService service.
type SpaceServiceClient interface {
	// Creates a new Space. Owner/creator derived from auth context.
	CreateSpace(context.Context, *connect_go.Request[v1.CreateSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Retrieves details of a specific Space.
	GetSpace(context.Context, *connect_go.Request[v1.GetSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Lists Spaces accessible to the caller (filtered by owner, labels etc.)
	ListSpaces(context.Context, *connect_go.Request[v1.ListSpacesRequest]) (*connect_go.Response[v1.ListSpacesResponse], error)
	// Updates mutable properties of a Space (e.g., name, labels, public_read).
	UpdateSpace(context.Context, *connect_go.Request[v1.UpdateSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Deletes a Space and its associated content (Memories, Chunks).
	DeleteSpace(context.Context, *connect_go.Request[v1.DeleteSpaceRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewSpaceServiceClient constructs a client for the goodmem.v1.SpaceService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSpaceServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SpaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &spaceServiceClient{
		createSpace: connect_go.NewClient[v1.CreateSpaceRequest, v1.Space](
			httpClient,
			baseURL+SpaceServiceCreateSpaceProcedure,
			opts...,
		),
		getSpace: connect_go.NewClient[v1.GetSpaceRequest, v1.Space](
			httpClient,
			baseURL+SpaceServiceGetSpaceProcedure,
			opts...,
		),
		listSpaces: connect_go.NewClient[v1.ListSpacesRequest, v1.ListSpacesResponse](
			httpClient,
			baseURL+SpaceServiceListSpacesProcedure,
			opts...,
		),
		updateSpace: connect_go.NewClient[v1.UpdateSpaceRequest, v1.Space](
			httpClient,
			baseURL+SpaceServiceUpdateSpaceProcedure,
			opts...,
		),
		deleteSpace: connect_go.NewClient[v1.DeleteSpaceRequest, emptypb.Empty](
			httpClient,
			baseURL+SpaceServiceDeleteSpaceProcedure,
			opts...,
		),
	}
}

// spaceServiceClient implements SpaceServiceClient.
type spaceServiceClient struct {
	createSpace *connect_go.Client[v1.CreateSpaceRequest, v1.Space]
	getSpace    *connect_go.Client[v1.GetSpaceRequest, v1.Space]
	listSpaces  *connect_go.Client[v1.ListSpacesRequest, v1.ListSpacesResponse]
	updateSpace *connect_go.Client[v1.UpdateSpaceRequest, v1.Space]
	deleteSpace *connect_go.Client[v1.DeleteSpaceRequest, emptypb.Empty]
}

// CreateSpace calls goodmem.v1.SpaceService.CreateSpace.
func (c *spaceServiceClient) CreateSpace(ctx context.Context, req *connect_go.Request[v1.CreateSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return c.createSpace.CallUnary(ctx, req)
}

// GetSpace calls goodmem.v1.SpaceService.GetSpace.
func (c *spaceServiceClient) GetSpace(ctx context.Context, req *connect_go.Request[v1.GetSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return c.getSpace.CallUnary(ctx, req)
}

// ListSpaces calls goodmem.v1.SpaceService.ListSpaces.
func (c *spaceServiceClient) ListSpaces(ctx context.Context, req *connect_go.Request[v1.ListSpacesRequest]) (*connect_go.Response[v1.ListSpacesResponse], error) {
	return c.listSpaces.CallUnary(ctx, req)
}

// UpdateSpace calls goodmem.v1.SpaceService.UpdateSpace.
func (c *spaceServiceClient) UpdateSpace(ctx context.Context, req *connect_go.Request[v1.UpdateSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return c.updateSpace.CallUnary(ctx, req)
}

// DeleteSpace calls goodmem.v1.SpaceService.DeleteSpace.
func (c *spaceServiceClient) DeleteSpace(ctx context.Context, req *connect_go.Request[v1.DeleteSpaceRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteSpace.CallUnary(ctx, req)
}

// SpaceServiceHandler is an implementation of the goodmem.v1.SpaceService service.
type SpaceServiceHandler interface {
	// Creates a new Space. Owner/creator derived from auth context.
	CreateSpace(context.Context, *connect_go.Request[v1.CreateSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Retrieves details of a specific Space.
	GetSpace(context.Context, *connect_go.Request[v1.GetSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Lists Spaces accessible to the caller (filtered by owner, labels etc.)
	ListSpaces(context.Context, *connect_go.Request[v1.ListSpacesRequest]) (*connect_go.Response[v1.ListSpacesResponse], error)
	// Updates mutable properties of a Space (e.g., name, labels, public_read).
	UpdateSpace(context.Context, *connect_go.Request[v1.UpdateSpaceRequest]) (*connect_go.Response[v1.Space], error)
	// Deletes a Space and its associated content (Memories, Chunks).
	DeleteSpace(context.Context, *connect_go.Request[v1.DeleteSpaceRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewSpaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSpaceServiceHandler(svc SpaceServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	spaceServiceCreateSpaceHandler := connect_go.NewUnaryHandler(
		SpaceServiceCreateSpaceProcedure,
		svc.CreateSpace,
		opts...,
	)
	spaceServiceGetSpaceHandler := connect_go.NewUnaryHandler(
		SpaceServiceGetSpaceProcedure,
		svc.GetSpace,
		opts...,
	)
	spaceServiceListSpacesHandler := connect_go.NewUnaryHandler(
		SpaceServiceListSpacesProcedure,
		svc.ListSpaces,
		opts...,
	)
	spaceServiceUpdateSpaceHandler := connect_go.NewUnaryHandler(
		SpaceServiceUpdateSpaceProcedure,
		svc.UpdateSpace,
		opts...,
	)
	spaceServiceDeleteSpaceHandler := connect_go.NewUnaryHandler(
		SpaceServiceDeleteSpaceProcedure,
		svc.DeleteSpace,
		opts...,
	)
	return "/goodmem.v1.SpaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SpaceServiceCreateSpaceProcedure:
			spaceServiceCreateSpaceHandler.ServeHTTP(w, r)
		case SpaceServiceGetSpaceProcedure:
			spaceServiceGetSpaceHandler.ServeHTTP(w, r)
		case SpaceServiceListSpacesProcedure:
			spaceServiceListSpacesHandler.ServeHTTP(w, r)
		case SpaceServiceUpdateSpaceProcedure:
			spaceServiceUpdateSpaceHandler.ServeHTTP(w, r)
		case SpaceServiceDeleteSpaceProcedure:
			spaceServiceDeleteSpaceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSpaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSpaceServiceHandler struct{}

func (UnimplementedSpaceServiceHandler) CreateSpace(context.Context, *connect_go.Request[v1.CreateSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.SpaceService.CreateSpace is not implemented"))
}

func (UnimplementedSpaceServiceHandler) GetSpace(context.Context, *connect_go.Request[v1.GetSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.SpaceService.GetSpace is not implemented"))
}

func (UnimplementedSpaceServiceHandler) ListSpaces(context.Context, *connect_go.Request[v1.ListSpacesRequest]) (*connect_go.Response[v1.ListSpacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.SpaceService.ListSpaces is not implemented"))
}

func (UnimplementedSpaceServiceHandler) UpdateSpace(context.Context, *connect_go.Request[v1.UpdateSpaceRequest]) (*connect_go.Response[v1.Space], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.SpaceService.UpdateSpace is not implemented"))
}

func (UnimplementedSpaceServiceHandler) DeleteSpace(context.Context, *connect_go.Request[v1.DeleteSpaceRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.SpaceService.DeleteSpace is not implemented"))
}
