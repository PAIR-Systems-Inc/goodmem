// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goodmem/v1/memory.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pairsys/goodmem/cli/gen/goodmem/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MemoryServiceName is the fully-qualified name of the MemoryService service.
	MemoryServiceName = "goodmem.v1.MemoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MemoryServiceCreateMemoryProcedure is the fully-qualified name of the MemoryService's
	// CreateMemory RPC.
	MemoryServiceCreateMemoryProcedure = "/goodmem.v1.MemoryService/CreateMemory"
	// MemoryServiceGetMemoryProcedure is the fully-qualified name of the MemoryService's GetMemory RPC.
	MemoryServiceGetMemoryProcedure = "/goodmem.v1.MemoryService/GetMemory"
	// MemoryServiceListMemoriesProcedure is the fully-qualified name of the MemoryService's
	// ListMemories RPC.
	MemoryServiceListMemoriesProcedure = "/goodmem.v1.MemoryService/ListMemories"
	// MemoryServiceDeleteMemoryProcedure is the fully-qualified name of the MemoryService's
	// DeleteMemory RPC.
	MemoryServiceDeleteMemoryProcedure = "/goodmem.v1.MemoryService/DeleteMemory"
)

// MemoryServiceClient is a client for the goodmem.v1.MemoryService service.
type MemoryServiceClient interface {
	// Creates a new Memory record, triggering background processing (chunking/vectorization).
	CreateMemory(context.Context, *connect_go.Request[v1.CreateMemoryRequest]) (*connect_go.Response[v1.Memory], error)
	// Retrieves details of a specific Memory entity.
	GetMemory(context.Context, *connect_go.Request[v1.GetMemoryRequest]) (*connect_go.Response[v1.Memory], error)
	// Lists Memory entities within a Space.
	ListMemories(context.Context, *connect_go.Request[v1.ListMemoriesRequest]) (*connect_go.Response[v1.ListMemoriesResponse], error)
	// Deletes a Memory entity and triggers deletion of its associated chunks/vectors.
	DeleteMemory(context.Context, *connect_go.Request[v1.DeleteMemoryRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMemoryServiceClient constructs a client for the goodmem.v1.MemoryService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMemoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MemoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &memoryServiceClient{
		createMemory: connect_go.NewClient[v1.CreateMemoryRequest, v1.Memory](
			httpClient,
			baseURL+MemoryServiceCreateMemoryProcedure,
			opts...,
		),
		getMemory: connect_go.NewClient[v1.GetMemoryRequest, v1.Memory](
			httpClient,
			baseURL+MemoryServiceGetMemoryProcedure,
			opts...,
		),
		listMemories: connect_go.NewClient[v1.ListMemoriesRequest, v1.ListMemoriesResponse](
			httpClient,
			baseURL+MemoryServiceListMemoriesProcedure,
			opts...,
		),
		deleteMemory: connect_go.NewClient[v1.DeleteMemoryRequest, emptypb.Empty](
			httpClient,
			baseURL+MemoryServiceDeleteMemoryProcedure,
			opts...,
		),
	}
}

// memoryServiceClient implements MemoryServiceClient.
type memoryServiceClient struct {
	createMemory *connect_go.Client[v1.CreateMemoryRequest, v1.Memory]
	getMemory    *connect_go.Client[v1.GetMemoryRequest, v1.Memory]
	listMemories *connect_go.Client[v1.ListMemoriesRequest, v1.ListMemoriesResponse]
	deleteMemory *connect_go.Client[v1.DeleteMemoryRequest, emptypb.Empty]
}

// CreateMemory calls goodmem.v1.MemoryService.CreateMemory.
func (c *memoryServiceClient) CreateMemory(ctx context.Context, req *connect_go.Request[v1.CreateMemoryRequest]) (*connect_go.Response[v1.Memory], error) {
	return c.createMemory.CallUnary(ctx, req)
}

// GetMemory calls goodmem.v1.MemoryService.GetMemory.
func (c *memoryServiceClient) GetMemory(ctx context.Context, req *connect_go.Request[v1.GetMemoryRequest]) (*connect_go.Response[v1.Memory], error) {
	return c.getMemory.CallUnary(ctx, req)
}

// ListMemories calls goodmem.v1.MemoryService.ListMemories.
func (c *memoryServiceClient) ListMemories(ctx context.Context, req *connect_go.Request[v1.ListMemoriesRequest]) (*connect_go.Response[v1.ListMemoriesResponse], error) {
	return c.listMemories.CallUnary(ctx, req)
}

// DeleteMemory calls goodmem.v1.MemoryService.DeleteMemory.
func (c *memoryServiceClient) DeleteMemory(ctx context.Context, req *connect_go.Request[v1.DeleteMemoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteMemory.CallUnary(ctx, req)
}

// MemoryServiceHandler is an implementation of the goodmem.v1.MemoryService service.
type MemoryServiceHandler interface {
	// Creates a new Memory record, triggering background processing (chunking/vectorization).
	CreateMemory(context.Context, *connect_go.Request[v1.CreateMemoryRequest]) (*connect_go.Response[v1.Memory], error)
	// Retrieves details of a specific Memory entity.
	GetMemory(context.Context, *connect_go.Request[v1.GetMemoryRequest]) (*connect_go.Response[v1.Memory], error)
	// Lists Memory entities within a Space.
	ListMemories(context.Context, *connect_go.Request[v1.ListMemoriesRequest]) (*connect_go.Response[v1.ListMemoriesResponse], error)
	// Deletes a Memory entity and triggers deletion of its associated chunks/vectors.
	DeleteMemory(context.Context, *connect_go.Request[v1.DeleteMemoryRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewMemoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMemoryServiceHandler(svc MemoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	memoryServiceCreateMemoryHandler := connect_go.NewUnaryHandler(
		MemoryServiceCreateMemoryProcedure,
		svc.CreateMemory,
		opts...,
	)
	memoryServiceGetMemoryHandler := connect_go.NewUnaryHandler(
		MemoryServiceGetMemoryProcedure,
		svc.GetMemory,
		opts...,
	)
	memoryServiceListMemoriesHandler := connect_go.NewUnaryHandler(
		MemoryServiceListMemoriesProcedure,
		svc.ListMemories,
		opts...,
	)
	memoryServiceDeleteMemoryHandler := connect_go.NewUnaryHandler(
		MemoryServiceDeleteMemoryProcedure,
		svc.DeleteMemory,
		opts...,
	)
	return "/goodmem.v1.MemoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MemoryServiceCreateMemoryProcedure:
			memoryServiceCreateMemoryHandler.ServeHTTP(w, r)
		case MemoryServiceGetMemoryProcedure:
			memoryServiceGetMemoryHandler.ServeHTTP(w, r)
		case MemoryServiceListMemoriesProcedure:
			memoryServiceListMemoriesHandler.ServeHTTP(w, r)
		case MemoryServiceDeleteMemoryProcedure:
			memoryServiceDeleteMemoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMemoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMemoryServiceHandler struct{}

func (UnimplementedMemoryServiceHandler) CreateMemory(context.Context, *connect_go.Request[v1.CreateMemoryRequest]) (*connect_go.Response[v1.Memory], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.MemoryService.CreateMemory is not implemented"))
}

func (UnimplementedMemoryServiceHandler) GetMemory(context.Context, *connect_go.Request[v1.GetMemoryRequest]) (*connect_go.Response[v1.Memory], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.MemoryService.GetMemory is not implemented"))
}

func (UnimplementedMemoryServiceHandler) ListMemories(context.Context, *connect_go.Request[v1.ListMemoriesRequest]) (*connect_go.Response[v1.ListMemoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.MemoryService.ListMemories is not implemented"))
}

func (UnimplementedMemoryServiceHandler) DeleteMemory(context.Context, *connect_go.Request[v1.DeleteMemoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.MemoryService.DeleteMemory is not implemented"))
}
