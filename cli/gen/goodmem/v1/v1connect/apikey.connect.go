// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goodmem/v1/apikey.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pairsys/goodmem/cli/gen/goodmem/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApiKeyServiceName is the fully-qualified name of the ApiKeyService service.
	ApiKeyServiceName = "goodmem.v1.ApiKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiKeyServiceCreateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// CreateApiKey RPC.
	ApiKeyServiceCreateApiKeyProcedure = "/goodmem.v1.ApiKeyService/CreateApiKey"
	// ApiKeyServiceListApiKeysProcedure is the fully-qualified name of the ApiKeyService's ListApiKeys
	// RPC.
	ApiKeyServiceListApiKeysProcedure = "/goodmem.v1.ApiKeyService/ListApiKeys"
	// ApiKeyServiceUpdateApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// UpdateApiKey RPC.
	ApiKeyServiceUpdateApiKeyProcedure = "/goodmem.v1.ApiKeyService/UpdateApiKey"
	// ApiKeyServiceDeleteApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// DeleteApiKey RPC.
	ApiKeyServiceDeleteApiKeyProcedure = "/goodmem.v1.ApiKeyService/DeleteApiKey"
)

// ApiKeyServiceClient is a client for the goodmem.v1.ApiKeyService service.
type ApiKeyServiceClient interface {
	// Creates a new API key for the authenticated user.
	// The raw key is returned ONLY in this response.
	CreateApiKey(context.Context, *connect_go.Request[v1.CreateApiKeyRequest]) (*connect_go.Response[v1.CreateApiKeyResponse], error)
	// Lists API keys belonging to the authenticated user (or admin specified user).
	ListApiKeys(context.Context, *connect_go.Request[v1.ListApiKeysRequest]) (*connect_go.Response[v1.ListApiKeysResponse], error)
	// Updates mutable properties of an API key (e.g., labels, status).
	UpdateApiKey(context.Context, *connect_go.Request[v1.UpdateApiKeyRequest]) (*connect_go.Response[v1.ApiKey], error)
	// Deletes (revokes) an API key.
	DeleteApiKey(context.Context, *connect_go.Request[v1.DeleteApiKeyRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApiKeyServiceClient constructs a client for the goodmem.v1.ApiKeyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiKeyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApiKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiKeyServiceClient{
		createApiKey: connect_go.NewClient[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceCreateApiKeyProcedure,
			opts...,
		),
		listApiKeys: connect_go.NewClient[v1.ListApiKeysRequest, v1.ListApiKeysResponse](
			httpClient,
			baseURL+ApiKeyServiceListApiKeysProcedure,
			opts...,
		),
		updateApiKey: connect_go.NewClient[v1.UpdateApiKeyRequest, v1.ApiKey](
			httpClient,
			baseURL+ApiKeyServiceUpdateApiKeyProcedure,
			opts...,
		),
		deleteApiKey: connect_go.NewClient[v1.DeleteApiKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiKeyServiceDeleteApiKeyProcedure,
			opts...,
		),
	}
}

// apiKeyServiceClient implements ApiKeyServiceClient.
type apiKeyServiceClient struct {
	createApiKey *connect_go.Client[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse]
	listApiKeys  *connect_go.Client[v1.ListApiKeysRequest, v1.ListApiKeysResponse]
	updateApiKey *connect_go.Client[v1.UpdateApiKeyRequest, v1.ApiKey]
	deleteApiKey *connect_go.Client[v1.DeleteApiKeyRequest, emptypb.Empty]
}

// CreateApiKey calls goodmem.v1.ApiKeyService.CreateApiKey.
func (c *apiKeyServiceClient) CreateApiKey(ctx context.Context, req *connect_go.Request[v1.CreateApiKeyRequest]) (*connect_go.Response[v1.CreateApiKeyResponse], error) {
	return c.createApiKey.CallUnary(ctx, req)
}

// ListApiKeys calls goodmem.v1.ApiKeyService.ListApiKeys.
func (c *apiKeyServiceClient) ListApiKeys(ctx context.Context, req *connect_go.Request[v1.ListApiKeysRequest]) (*connect_go.Response[v1.ListApiKeysResponse], error) {
	return c.listApiKeys.CallUnary(ctx, req)
}

// UpdateApiKey calls goodmem.v1.ApiKeyService.UpdateApiKey.
func (c *apiKeyServiceClient) UpdateApiKey(ctx context.Context, req *connect_go.Request[v1.UpdateApiKeyRequest]) (*connect_go.Response[v1.ApiKey], error) {
	return c.updateApiKey.CallUnary(ctx, req)
}

// DeleteApiKey calls goodmem.v1.ApiKeyService.DeleteApiKey.
func (c *apiKeyServiceClient) DeleteApiKey(ctx context.Context, req *connect_go.Request[v1.DeleteApiKeyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteApiKey.CallUnary(ctx, req)
}

// ApiKeyServiceHandler is an implementation of the goodmem.v1.ApiKeyService service.
type ApiKeyServiceHandler interface {
	// Creates a new API key for the authenticated user.
	// The raw key is returned ONLY in this response.
	CreateApiKey(context.Context, *connect_go.Request[v1.CreateApiKeyRequest]) (*connect_go.Response[v1.CreateApiKeyResponse], error)
	// Lists API keys belonging to the authenticated user (or admin specified user).
	ListApiKeys(context.Context, *connect_go.Request[v1.ListApiKeysRequest]) (*connect_go.Response[v1.ListApiKeysResponse], error)
	// Updates mutable properties of an API key (e.g., labels, status).
	UpdateApiKey(context.Context, *connect_go.Request[v1.UpdateApiKeyRequest]) (*connect_go.Response[v1.ApiKey], error)
	// Deletes (revokes) an API key.
	DeleteApiKey(context.Context, *connect_go.Request[v1.DeleteApiKeyRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApiKeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiKeyServiceHandler(svc ApiKeyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	apiKeyServiceCreateApiKeyHandler := connect_go.NewUnaryHandler(
		ApiKeyServiceCreateApiKeyProcedure,
		svc.CreateApiKey,
		opts...,
	)
	apiKeyServiceListApiKeysHandler := connect_go.NewUnaryHandler(
		ApiKeyServiceListApiKeysProcedure,
		svc.ListApiKeys,
		opts...,
	)
	apiKeyServiceUpdateApiKeyHandler := connect_go.NewUnaryHandler(
		ApiKeyServiceUpdateApiKeyProcedure,
		svc.UpdateApiKey,
		opts...,
	)
	apiKeyServiceDeleteApiKeyHandler := connect_go.NewUnaryHandler(
		ApiKeyServiceDeleteApiKeyProcedure,
		svc.DeleteApiKey,
		opts...,
	)
	return "/goodmem.v1.ApiKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiKeyServiceCreateApiKeyProcedure:
			apiKeyServiceCreateApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceListApiKeysProcedure:
			apiKeyServiceListApiKeysHandler.ServeHTTP(w, r)
		case ApiKeyServiceUpdateApiKeyProcedure:
			apiKeyServiceUpdateApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceDeleteApiKeyProcedure:
			apiKeyServiceDeleteApiKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiKeyServiceHandler struct{}

func (UnimplementedApiKeyServiceHandler) CreateApiKey(context.Context, *connect_go.Request[v1.CreateApiKeyRequest]) (*connect_go.Response[v1.CreateApiKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.ApiKeyService.CreateApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) ListApiKeys(context.Context, *connect_go.Request[v1.ListApiKeysRequest]) (*connect_go.Response[v1.ListApiKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.ApiKeyService.ListApiKeys is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) UpdateApiKey(context.Context, *connect_go.Request[v1.UpdateApiKeyRequest]) (*connect_go.Response[v1.ApiKey], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.ApiKeyService.UpdateApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) DeleteApiKey(context.Context, *connect_go.Request[v1.DeleteApiKeyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.ApiKeyService.DeleteApiKey is not implemented"))
}
