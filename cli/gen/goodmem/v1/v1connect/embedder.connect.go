// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goodmem/v1/embedder.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/pairsys/goodmem/cli/gen/goodmem/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EmbedderServiceName is the fully-qualified name of the EmbedderService service.
	EmbedderServiceName = "goodmem.v1.EmbedderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmbedderServiceCreateEmbedderProcedure is the fully-qualified name of the EmbedderService's
	// CreateEmbedder RPC.
	EmbedderServiceCreateEmbedderProcedure = "/goodmem.v1.EmbedderService/CreateEmbedder"
	// EmbedderServiceGetEmbedderProcedure is the fully-qualified name of the EmbedderService's
	// GetEmbedder RPC.
	EmbedderServiceGetEmbedderProcedure = "/goodmem.v1.EmbedderService/GetEmbedder"
	// EmbedderServiceListEmbeddersProcedure is the fully-qualified name of the EmbedderService's
	// ListEmbedders RPC.
	EmbedderServiceListEmbeddersProcedure = "/goodmem.v1.EmbedderService/ListEmbedders"
	// EmbedderServiceUpdateEmbedderProcedure is the fully-qualified name of the EmbedderService's
	// UpdateEmbedder RPC.
	EmbedderServiceUpdateEmbedderProcedure = "/goodmem.v1.EmbedderService/UpdateEmbedder"
	// EmbedderServiceDeleteEmbedderProcedure is the fully-qualified name of the EmbedderService's
	// DeleteEmbedder RPC.
	EmbedderServiceDeleteEmbedderProcedure = "/goodmem.v1.EmbedderService/DeleteEmbedder"
)

// EmbedderServiceClient is a client for the goodmem.v1.EmbedderService service.
type EmbedderServiceClient interface {
	// Creates a new Embedder. Owner/creator derived from auth context.
	CreateEmbedder(context.Context, *connect_go.Request[v1.CreateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Retrieves details of a specific Embedder.
	GetEmbedder(context.Context, *connect_go.Request[v1.GetEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Lists Embedders accessible to the caller (filtered by owner, provider type, etc.)
	ListEmbedders(context.Context, *connect_go.Request[v1.ListEmbeddersRequest]) (*connect_go.Response[v1.ListEmbeddersResponse], error)
	// Updates mutable properties of an Embedder
	UpdateEmbedder(context.Context, *connect_go.Request[v1.UpdateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Deletes an Embedder
	DeleteEmbedder(context.Context, *connect_go.Request[v1.DeleteEmbedderRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewEmbedderServiceClient constructs a client for the goodmem.v1.EmbedderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmbedderServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EmbedderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &embedderServiceClient{
		createEmbedder: connect_go.NewClient[v1.CreateEmbedderRequest, v1.Embedder](
			httpClient,
			baseURL+EmbedderServiceCreateEmbedderProcedure,
			opts...,
		),
		getEmbedder: connect_go.NewClient[v1.GetEmbedderRequest, v1.Embedder](
			httpClient,
			baseURL+EmbedderServiceGetEmbedderProcedure,
			opts...,
		),
		listEmbedders: connect_go.NewClient[v1.ListEmbeddersRequest, v1.ListEmbeddersResponse](
			httpClient,
			baseURL+EmbedderServiceListEmbeddersProcedure,
			opts...,
		),
		updateEmbedder: connect_go.NewClient[v1.UpdateEmbedderRequest, v1.Embedder](
			httpClient,
			baseURL+EmbedderServiceUpdateEmbedderProcedure,
			opts...,
		),
		deleteEmbedder: connect_go.NewClient[v1.DeleteEmbedderRequest, emptypb.Empty](
			httpClient,
			baseURL+EmbedderServiceDeleteEmbedderProcedure,
			opts...,
		),
	}
}

// embedderServiceClient implements EmbedderServiceClient.
type embedderServiceClient struct {
	createEmbedder *connect_go.Client[v1.CreateEmbedderRequest, v1.Embedder]
	getEmbedder    *connect_go.Client[v1.GetEmbedderRequest, v1.Embedder]
	listEmbedders  *connect_go.Client[v1.ListEmbeddersRequest, v1.ListEmbeddersResponse]
	updateEmbedder *connect_go.Client[v1.UpdateEmbedderRequest, v1.Embedder]
	deleteEmbedder *connect_go.Client[v1.DeleteEmbedderRequest, emptypb.Empty]
}

// CreateEmbedder calls goodmem.v1.EmbedderService.CreateEmbedder.
func (c *embedderServiceClient) CreateEmbedder(ctx context.Context, req *connect_go.Request[v1.CreateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return c.createEmbedder.CallUnary(ctx, req)
}

// GetEmbedder calls goodmem.v1.EmbedderService.GetEmbedder.
func (c *embedderServiceClient) GetEmbedder(ctx context.Context, req *connect_go.Request[v1.GetEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return c.getEmbedder.CallUnary(ctx, req)
}

// ListEmbedders calls goodmem.v1.EmbedderService.ListEmbedders.
func (c *embedderServiceClient) ListEmbedders(ctx context.Context, req *connect_go.Request[v1.ListEmbeddersRequest]) (*connect_go.Response[v1.ListEmbeddersResponse], error) {
	return c.listEmbedders.CallUnary(ctx, req)
}

// UpdateEmbedder calls goodmem.v1.EmbedderService.UpdateEmbedder.
func (c *embedderServiceClient) UpdateEmbedder(ctx context.Context, req *connect_go.Request[v1.UpdateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return c.updateEmbedder.CallUnary(ctx, req)
}

// DeleteEmbedder calls goodmem.v1.EmbedderService.DeleteEmbedder.
func (c *embedderServiceClient) DeleteEmbedder(ctx context.Context, req *connect_go.Request[v1.DeleteEmbedderRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteEmbedder.CallUnary(ctx, req)
}

// EmbedderServiceHandler is an implementation of the goodmem.v1.EmbedderService service.
type EmbedderServiceHandler interface {
	// Creates a new Embedder. Owner/creator derived from auth context.
	CreateEmbedder(context.Context, *connect_go.Request[v1.CreateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Retrieves details of a specific Embedder.
	GetEmbedder(context.Context, *connect_go.Request[v1.GetEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Lists Embedders accessible to the caller (filtered by owner, provider type, etc.)
	ListEmbedders(context.Context, *connect_go.Request[v1.ListEmbeddersRequest]) (*connect_go.Response[v1.ListEmbeddersResponse], error)
	// Updates mutable properties of an Embedder
	UpdateEmbedder(context.Context, *connect_go.Request[v1.UpdateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error)
	// Deletes an Embedder
	DeleteEmbedder(context.Context, *connect_go.Request[v1.DeleteEmbedderRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewEmbedderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmbedderServiceHandler(svc EmbedderServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	embedderServiceCreateEmbedderHandler := connect_go.NewUnaryHandler(
		EmbedderServiceCreateEmbedderProcedure,
		svc.CreateEmbedder,
		opts...,
	)
	embedderServiceGetEmbedderHandler := connect_go.NewUnaryHandler(
		EmbedderServiceGetEmbedderProcedure,
		svc.GetEmbedder,
		opts...,
	)
	embedderServiceListEmbeddersHandler := connect_go.NewUnaryHandler(
		EmbedderServiceListEmbeddersProcedure,
		svc.ListEmbedders,
		opts...,
	)
	embedderServiceUpdateEmbedderHandler := connect_go.NewUnaryHandler(
		EmbedderServiceUpdateEmbedderProcedure,
		svc.UpdateEmbedder,
		opts...,
	)
	embedderServiceDeleteEmbedderHandler := connect_go.NewUnaryHandler(
		EmbedderServiceDeleteEmbedderProcedure,
		svc.DeleteEmbedder,
		opts...,
	)
	return "/goodmem.v1.EmbedderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmbedderServiceCreateEmbedderProcedure:
			embedderServiceCreateEmbedderHandler.ServeHTTP(w, r)
		case EmbedderServiceGetEmbedderProcedure:
			embedderServiceGetEmbedderHandler.ServeHTTP(w, r)
		case EmbedderServiceListEmbeddersProcedure:
			embedderServiceListEmbeddersHandler.ServeHTTP(w, r)
		case EmbedderServiceUpdateEmbedderProcedure:
			embedderServiceUpdateEmbedderHandler.ServeHTTP(w, r)
		case EmbedderServiceDeleteEmbedderProcedure:
			embedderServiceDeleteEmbedderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmbedderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmbedderServiceHandler struct{}

func (UnimplementedEmbedderServiceHandler) CreateEmbedder(context.Context, *connect_go.Request[v1.CreateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.EmbedderService.CreateEmbedder is not implemented"))
}

func (UnimplementedEmbedderServiceHandler) GetEmbedder(context.Context, *connect_go.Request[v1.GetEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.EmbedderService.GetEmbedder is not implemented"))
}

func (UnimplementedEmbedderServiceHandler) ListEmbedders(context.Context, *connect_go.Request[v1.ListEmbeddersRequest]) (*connect_go.Response[v1.ListEmbeddersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.EmbedderService.ListEmbedders is not implemented"))
}

func (UnimplementedEmbedderServiceHandler) UpdateEmbedder(context.Context, *connect_go.Request[v1.UpdateEmbedderRequest]) (*connect_go.Response[v1.Embedder], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.EmbedderService.UpdateEmbedder is not implemented"))
}

func (UnimplementedEmbedderServiceHandler) DeleteEmbedder(context.Context, *connect_go.Request[v1.DeleteEmbedderRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goodmem.v1.EmbedderService.DeleteEmbedder is not implemented"))
}
